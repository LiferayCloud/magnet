#!/usr/bin/env node

import {join} from 'path';
import {spawn} from 'cross-spawn';
import chokidar from 'chokidar';
import log from '../log';
import pkg from '../../package.json';

const defaultCommand = 'dev';
const commands = new Set([
  defaultCommand,
  'start',
  'build',
  'generate',
  'routes',
]);

let cmd = process.argv[2];
let args;

if (new Set(['--version', '-v']).has(cmd)) {
  console.log(`magnet.js v${pkg.version}`);
  process.exit(0);
}

if (new Set(['--help', '-h']).has(cmd)) {
  console.log(`
    Usage
      $ magnet <command>

    Available commands
      ${Array.from(commands).join(', ')}

    For more information run a command with the --help flag
      $ magnet start --help
  `);
  process.exit(0);
}

if (commands.has(cmd)) {
  args = process.argv.slice(3);
} else {
  cmd = defaultCommand;
  args = process.argv.slice(2);
}

const bin = join(__dirname, 'magnet-' + cmd);
let isWatcherInitialized = false;
let childApp;

if (cmd === 'dev') {
  const watcher = chokidar.watch('**/*', {
    awaitWriteFinish: true,
    cwd: process.cwd(),
    ignored: /node_modules|\.magnet|\.git|\.soy\.js/,
    ignoreInitial: true,
  });

  watcher.on('change', restartApp);
  watcher.on('add', restartApp);
  watcher.on('unlink', restartApp);

  watcher.on('ready', () => {
    if (!isWatcherInitialized) {
      isWatcherInitialized = true;
      restartApp();
    }
  });

  process.on('SIGINT', function() {
    watcher.close();
    process.exit(1);
  });
} else {
  killApp();
  spawnChildApp();
}

/**
 * Restart current cli app.
 */
function restartApp() {
  if (!isWatcherInitialized) return;
  prepareRestart();
}

/**
 * Prepares to restart.
 */
function prepareRestart() {
  if (isWatcherInitialized && childApp) {
    // kill app early as `compile` may take a while
    log.info(false, 'Found a change, restarting the serverâ€¦');
    killApp();
  } else {
    spawnChildApp();
  }
}

/**
 * Kills app.
 */
function killApp() {
  if (childApp) {
    childApp.on('exit', () => {
      spawnChildApp();
    });
    childApp.removeAllListeners('close');
    try {
      childApp.kill('SIGHUP');
    } catch (error) {
      childApp.kill('SIGKILL');
    }
    childApp = undefined;
  }
}

/**
 * Spawns new child app.
 */
function spawnChildApp() {
  childApp = spawn(
    bin, args,
    {stdio: 'inherit', customFds: [0, 1, 2]}
  );
  childApp.on('close', (code, signal) => {
    if (code !== null) {
      process.exit(code);
    }
    if (signal) {
      if (signal === 'SIGKILL') {
        process.exit(137);
      }
      log.info(false, 'exiting');
      process.exit(1);
    }
    process.exit(0);
  });
  childApp.on('error', (err) => {
    log.error(false, err);
    process.exit(1);
  });
}
